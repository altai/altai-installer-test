#!/bin/bash -x
echo "Starting script $0 $@"
cd "$(dirname $0)"

#DIRTY INSTALLER TEST SCRIPT
. ./env
#TODO: check INSTALLER_REPO, INSTALLER_DIR, INSTALLER_VERSION etc and bailout
#TODO die if unknown NODE_NAME
echo "Installer version to use: "$INSTALLER_VERSION

if [ "x$MODE" == "xcompute"  ]; then
    sed -i s/MASTER_NODE_IP/$MASTER_NODE_IP/ *.json
else
    sed -i s/MASTER_NODE_IP/$NODE_IP/ *.json
fi

MASTER_SERVICES="memcached focus odb 
    mysqld ntpd rabbitmq-server keystone 
    glance-api glance-registry
    nova-api nova-network nova-scheduler nova-novncproxy
    nova-billing-heart nova-billing-os-amqp
    pdns nova-dns"
MASTER_TCP_PORTS="80 5000"
MASTER_UDP_PORTS="53 123"

COMPUTE_SERVICES="ntpd libvirtd nova-compute"
COMPUTE_TCP_PORTS="22"
COMPUTE_UDP_PORTS=""


draw_line() { perl -e 'printf "%s\n%s\n\n", "_" x 80, "=" x 80' }

check_services() {
        SERVICES=$1
        echo "Checking services... "
        PROCESS=`perl -lpe 's/\000/ /' /proc/*/cmdline`
        for service in $SERVICES; do
            if [[ "$PROCESS" == ".*$service.*" ]]; then
                echo "Service: $service - ok"
            else
                echo "Service: $service - NOT running";
                retcode=1
            fi
        done
        return $retcode
}

check_ports() {
        log "Checking open ports..."
        TCP_PORTS=$1
        UDP_PORTS=$2
        NETSTAT=`netstat -anp`
        for port in $TCP_PORTS; do
            if [[ "$NETSTAT" == ".*tcp.*$port.*LISTEN.*" ]]; then
                echo "TCP Port: $port - ok"
            else 
                echo "TCP Port: $port - NOT listening"
                retcode=1
            fi
        done

        for port in $UDP_PORTS; do
            if [[ "$NETSTAT" == ".*udp.*:$port.*" ]]; then
                echo "UDP Port: $port - ok"
            else 
                echo "UDP Port:$port - NOT listening";
                retcode=1
            fi
        done
        return $retcode
}

#upload_image() {
#        exec_remote "wget http://osc-build.vm.griddynamics.net/images/mini_image.img"
#        exec_remote 'OS_USERNAME="admin" && OS_PASSWORD="topsecret" && OS_TENANT_NAME="systenant" && OS_AUTH_URL="http://172.18.40.107:5000/v2.0/" && OS_COMPUTE_API_VERSION="1.1" && OS_AUTH_STRATEGY="keystone" && NOVA_VERSION=1.1 && USE_KEYSTONE=true && glance add name="test-suite-image" disk_format=qcow2 container_format=ovf <mini_image.img'
#}


#TODO - add deps section in altai-release-0.1-0.el6.noarch.rpm
#TODO - add epel key for deps :)
#TODO - provide key for internal git
set +e
if [[ "x$REPO_RPM" == "xcustom" ]]; then
    rpm -Uvh http://yum.griddynamics.net/yum/altai_v0.1_centos/altai-release-0.1-0.el6.noarch.rpm
    perl -i -pe 's/baseurl=.+_(?:(deps)|(centos))/baseurl=$ENV{$1 ? "CUSTOM_DEPS_REPO_PATH" : "CUSTOM_REPO_PATH"}/' /etc/yum.repos.d/altai.repo
else 
    rpm -Uvh $REPO_RPM
fi
yum clean all

if [[ "x$INSTALLER_VERSION" == "xaltai-installer.rpm" ]]
then
    yum -y install altai-installer
else
    echo "Cloning installer from $INSTALLER_REPO on host $RUN_SERVER"
    yum -y install git altai-chef-gems
    cd /opt/
    git clone $INSTALLER_VERSION altai
fi
cd /opt/altai/

cp ~/altai-deploy-scripts/*.json ./

set -e
retcode=0
if [[ "$MODE" == "master.*" ]]; then
    echo "Running ./install.sh master"
    if [ "x$MODE" == "xmaster" ]; then
        mv master-node-only.json master-node.json
    fi
    echo 'master-node.json:'
    cat master-node.json 
    ./install.sh master

    draw_line
    check_services "$MASTER_SERVICES"
    check_ports "$MASTER_TCP_PORTS" "$MASTER_UDP_PORTS"
    echo -n "Checking web UI title:"
    if wget -qO - http://$NODE_IP:80 | grep "Altai Private Cloud"; then
        echo " Ok"
    else 
        echo " FAIL"
        retcode=1
    fi
    echo -n "Checking nova-manage: "
    if nova-manage service list | grep enabled | grep api | grep $NODE_NAME; then 
        echo " Ok"
    else 
        echo " FAIL"
        retcode=1
    fi
fi
if [[ "$MODE" == ".*compute" ]]; then
    echo "Running ./install.sh compute"
    echo 'compute-node.json:'
    cat compute-node.json 
    ./install.sh compute

    draw_line
    check_services "$COMPUTE_SERVICES"
    check_ports "$COMPUTE_TCP_PORTS" "$COMPUTE_UDP_PORTS"
fi

if [ $retcode -eq 0 ]; then
    echo "Installation Successful"
else
    echo "Installation failed. Try to debug"
fi

exit $retcode 
